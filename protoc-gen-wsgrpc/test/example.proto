syntax = "proto3";
package ex.ample;

enum EnumType {
    ENUM_TYPE_NONE = 0;
    ENUM_TYPE_ONE = 1;
    ENUM_TYPE_TWO = 2;
}

message Inner {
    sfixed32 int_fixed = 13;
    sfixed64 long_fixed = 14;
    sint32 zigzag_int = 15;
    sint64 zigzag_long = 16;
    Outer.Nested nested = 17; // can reach "Nested" from Inner via Outer
    Outer.NestEnumeration nestedEnum = 18; // can reach "Nested" from Inner via Outer
}

message Outer {
    double double_val = 1;
    float float_val = 2;
    int64 long_val = 3;
    uint64 ulong_val = 4;
    int32 int_val = 5;
    fixed64 ulong_fixed = 6;
    fixed32 uint_fixed = 7;
    bool bool_val = 8;
    string string_val = 9;
    bytes bytes_val = 10;
    uint32 uint_val = 11;
    EnumType enum_val = 12;
    Inner inner = 17;
    repeated double doubles = 18;
    repeated Inner inners = 19;
    map<string, string> map = 20;
    map<string, Inner> map_inner = 21;
    map<int64, int32> map_ints = 22;
    map<bool, string> map_bool = 23;
    Outer recursive = 24;
    oneof union {
        Inner inner_option = 25;
        string string_option = 26;
    }
    Nested nested = 27; // can reach "Nested" from Outer

    message Nested {
        repeated NestEnumeration enums = 1;
        Inner inner = 2; // can reach "inner" from Nested
    }

    enum NestEnumeration {
        NEST_ENUMERATION_BLACK = 0;
        NEST_ENUMERATION_RED = 1;
        NEST_ENUMERATION_BLUE = 2;
    }
}